[package]
name = "open-coroutine-hook"
version = { workspace = true }
edition = { workspace = true }
authors = { workspace = true }
description = "The syscall hook for open-coroutine"
repository = "https://github.com/acl-dev/open-coroutine/tree/dev/open-coroutine-hooks"
keywords = ["open-coroutine", "hook", "syscall"]
categories = ["os", "concurrency", "asynchronous"]
license = { workspace = true }
readme = { workspace = true }

[dependencies]
once_cell = { workspace = true, optional = true }
open-coroutine-core = { workspace = true }

[target.'cfg(unix)'.dependencies]
libc = { workspace = true, optional = true }

[target.'cfg(windows)'.dependencies]
windows-sys = { workspace = true, features = [
    "Win32_Foundation",
    "Win32_System_Diagnostics_Debug",
    "Win32_System_Threading",
    "Win32_Security",
    "Win32_System_LibraryLoader",
    "Win32_System_SystemServices"
], optional = true }
minhook = { workspace = true, optional = true }

[features]
# Print some help log.
# Enable for default.
log = ["open-coroutine-core/log"]

# Provide preemptive scheduling implementation.
# Enable for default.
preemptive = ["open-coroutine-core/preemptive"]

# Provide net API abstraction and implementation.
net = ["open-coroutine-core/net"]

# Provide io_uring adaptation, this feature only works in linux.
io_uring = ["open-coroutine-core/io_uring"]

# Provide syscall implementation.
syscall = ["open-coroutine-core/syscall"]

# Provide hook implementation.
hook = ["syscall", "once_cell", "libc", "windows-sys", "minhook"]

default = ["open-coroutine-core/default", "hook"]

[lib]
crate-type = ["cdylib"]
